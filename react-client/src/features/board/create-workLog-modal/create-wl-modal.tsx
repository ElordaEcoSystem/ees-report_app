import { Dialog, DialogContent, DialogTitle } from "@/shared/ui/kit/dialog";
import { useCreateWorkLogModal } from "./use-create-wl-modal";
import { WorkLogForm } from "./create-wl-form";
import { Button } from "@/shared/ui/kit/button";
import z from "zod";
import { fetchCreateWorkLog } from "@/shared/model/api";
import { useState } from "react";
import { resizeImageFile } from "@/shared/model/compressPhoto";
const workLogSchema = z.object({
  objectType: z.enum(["–ù–°", "–û–°"], { required_error: "–¢–∏–ø –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }), // üëà –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø
  object: z.string({ required_error: "–û–ë—ä–µ–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }),
  content: z.string({ required_error: "–ü—Ä–æ–¥–µ–ª–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" }),
  photo: z.instanceof(File),
});

export function CreateWorkLogModal() {
  const { isOpen, close } = useCreateWorkLogModal();
  const [isLoading, setIsLoading] = useState(false);
   const handleSubmit = async (data: z.infer<typeof workLogSchema>) => {
    setIsLoading(true);
    console.log("NEW TYPEOBJEXT",data)
    try {
      const resizedPhoto = await resizeImageFile(data.photo);
      const response = await fetchCreateWorkLog({...data,photo:resizedPhoto});
      // const response = await fetchCreateWorkLog(data);
      if (response) {
        close();
      }
    } finally {
      setIsLoading(false);
    }
  }; 
  return (
    <Dialog onOpenChange={close} open={isOpen}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogTitle className=" text-center">–§–∏–∫—Å–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã</DialogTitle>
        <WorkLogForm
          onSubmit={handleSubmit}
          footer={<Button className="h-12" type="submit" disabled={isLoading}>{isLoading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}</Button>}
        ></WorkLogForm>
      </DialogContent>
    </Dialog>
  );
}
